package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name = "powerPlayteleop2 (Blocks to Java)")
public class powerPlayteleop2 extends LinearOpMode {

  private DcMotor eleAsDcMotor;
  private DcMotor FLAsDcMotor;
  private DcMotor FRAsDcMotor;
  private DcMotor BLAsDcMotor;
  private DcMotor BRAsDcMotor;
  private Servo clawAsServo;

  double drive;
  float eletg;
  float strafe;
  int level;
  int j;
  double turn;
  int bus;
  double tgtpower_FL;
  double tgtpower_FR;
  double tgtpower_BL;
  double tgtpower_BR;

  /**
   * Describe this function...
   */
  private void ele2() {
    eleAsDcMotor.setPower(eletg * 0.6);
    eletg = gamepad2.right_stick_y;
  }

  /**
   * Describe this function...
   */
  private void go2() {
    drive = -gamepad1.left_stick_y * 0.75;
    strafe = -gamepad1.left_stick_x;
    turn = -gamepad1.right_stick_x * 0.75;
    tgtpower_FL = (turn + strafe) - drive;
    if (tgtpower_FL > 1) {
      tgtpower_FL = 1;
    } else if (tgtpower_FL < -1) {
      tgtpower_FL = -1;
    }
    ((DcMotorEx) FLAsDcMotor).setVelocity(tgtpower_FL * 375);
    tgtpower_FR = turn + strafe + drive;
    if (tgtpower_FR > 1) {
      tgtpower_FR = 1;
    } else if (tgtpower_FR < -1) {
      tgtpower_FR = -1;
    }
    ((DcMotorEx) FRAsDcMotor).setVelocity(tgtpower_FR * 375);
    tgtpower_BL = (turn - strafe) - drive;
    if (tgtpower_BL > 1) {
      tgtpower_BL = 1;
    } else if (tgtpower_BL < -1) {
      tgtpower_BL = -1;
    }
    ((DcMotorEx) BLAsDcMotor).setVelocity(tgtpower_BL * 375);
    tgtpower_BR = (turn - strafe) + drive;
    if (tgtpower_BR > 1) {
      tgtpower_BR = 1;
    } else if (tgtpower_BR < -1) {
      tgtpower_BR = -1;
    }
    ((DcMotorEx) BRAsDcMotor).setVelocity(tgtpower_BR * 375);
  }

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    eleAsDcMotor = hardwareMap.get(DcMotor.class, "eleAsDcMotor");
    FLAsDcMotor = hardwareMap.get(DcMotor.class, "FLAsDcMotor");
    FRAsDcMotor = hardwareMap.get(DcMotor.class, "FRAsDcMotor");
    BLAsDcMotor = hardwareMap.get(DcMotor.class, "BLAsDcMotor");
    BRAsDcMotor = hardwareMap.get(DcMotor.class, "BRAsDcMotor");
    clawAsServo = hardwareMap.get(Servo.class, "clawAsServo");

    // Put initialization blocks here.
    FLAsDcMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    FRAsDcMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    BLAsDcMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    BRAsDcMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    eleAsDcMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    level = 0;
    j = 0;
    drive = 0;
    strafe = 0;
    turn = 0;
    telemetry.speak("Run cross country", null, null);
    waitForStart();
    if (opModeIsActive()) {
      // Put run blocks here.
      clawAsServo.setPosition(0.4);
      while (opModeIsActive()) {
        // Put loop blocks here.
        go2();
        ele2();
        claw();
        telemetry2();
        telemetry.update();
      }
    }
  }

  /**
   * Describe this function...
   */
  private void ele(double pos1, double pos2, double pos3, double elepower) {
    if (gamepad2.dpad_up && bus == 0 && (level == 0 || level == -1)) {
      level = 1;
      bus = 1;
      j = 0;
    }
    if (gamepad2.dpad_up && bus == 0 && (level == 1 || level == -2)) {
      level = 2;
      bus = 1;
      j = 0;
    }
    if (gamepad2.dpad_up && bus == 0 && (level == 2 || level == -3)) {
      level = 3;
      bus = 1;
      j = 0;
    }
    if (gamepad2.dpad_down && bus == 0 && (level == 1 || level == -2)) {
      level = -1;
      bus = 1;
      j = 0;
    }
    if (gamepad2.dpad_down && bus == 0 && (level == 2 || level == -3)) {
      level = -2;
      bus = 1;
      j = 0;
    }
    if (gamepad2.dpad_down && bus == 0 && level == 3) {
      level = -3;
      bus = 1;
      j = 0;
    }
    if (level == 0) {
      eletg = 0 + j;
      eleAsDcMotor.setTargetPosition((int) eletg);
      eleAsDcMotor.setPower(-elepower);
      eleAsDcMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      if (eleAsDcMotor.getCurrentPosition() >= -5 && eleAsDcMotor.getCurrentPosition() <= 5) {
        bus = 0;
      }
    }
    if (level == 1) {
      eletg = (float) (pos1 + j);
      eleAsDcMotor.setTargetPosition((int) eletg);
      eleAsDcMotor.setPower(-elepower);
      eleAsDcMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      telemetry.update();
      if (eleAsDcMotor.getCurrentPosition() >= pos1 - 5 && eleAsDcMotor.getCurrentPosition() <= pos1 + 5) {
        bus = 0;
      }
    }
    if (level == 2) {
      eletg = (float) (pos2 + j);
      eleAsDcMotor.setTargetPosition((int) eletg);
      eleAsDcMotor.setPower(-elepower);
      eleAsDcMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      telemetry.update();
      if (eleAsDcMotor.getCurrentPosition() >= pos2 - 5 && eleAsDcMotor.getCurrentPosition() <= pos2 + 5) {
        bus = 0;
      }
    }
    if (level == 3) {
      eletg = (float) (pos3 + j);
      eleAsDcMotor.setTargetPosition((int) eletg);
      eleAsDcMotor.setPower(-elepower);
      eleAsDcMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      telemetry.update();
      if (eleAsDcMotor.getCurrentPosition() >= pos3 - 5 && eleAsDcMotor.getCurrentPosition() <= pos3 + 5) {
        bus = 0;
      }
    }
    if (level == -3) {
      eletg = (float) (pos2 + j);
      eleAsDcMotor.setTargetPosition((int) eletg);
      eleAsDcMotor.setPower(elepower);
      eleAsDcMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      telemetry.update();
      if (eleAsDcMotor.getCurrentPosition() >= pos2 - 5 && eleAsDcMotor.getCurrentPosition() <= pos2 + 5) {
        bus = 0;
      }
    }
    if (level == -2) {
      eletg = (float) (pos1 + j);
      eleAsDcMotor.setTargetPosition((int) eletg);
      eleAsDcMotor.setPower(elepower);
      eleAsDcMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      telemetry.update();
      if (eleAsDcMotor.getCurrentPosition() >= pos1 - 5 && eleAsDcMotor.getCurrentPosition() <= pos1 + 5) {
        bus = 0;
      }
    }
    if (level == -1) {
      eletg = 0 + j;
      eleAsDcMotor.setTargetPosition((int) eletg);
      eleAsDcMotor.setPower(elepower);
      eleAsDcMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      telemetry.update();
      if (eleAsDcMotor.getCurrentPosition() >= -5 && eleAsDcMotor.getCurrentPosition() <= 5) {
        bus = 0;
      }
    }
  }

  /**
   * Describe this function...
   */
  private void claw() {
    if (gamepad2.a) {
      clawAsServo.setPosition(0.8);
    }
    if (gamepad2.b) {
      clawAsServo.setPosition(0.4);
    }
  }

  /**
   * Describe this function...
   */
  private void telemetry2() {
    telemetry.addData("j", j);
    telemetry.addData("Power ele", eleAsDcMotor.getPower());
    telemetry.addData("Target Power FL", tgtpower_FL);
    telemetry.addData("Motor Power FL", FLAsDcMotor.getPower());
    telemetry.addData("Target Power FR", tgtpower_FR);
    telemetry.addData("Motor Power FR", FRAsDcMotor.getPower());
    telemetry.addData("Target Power BL", tgtpower_BL);
    telemetry.addData("Motor Power BL", BLAsDcMotor.getPower());
    telemetry.addData("Target Power BR", tgtpower_BR);
    telemetry.addData("Motor Power BR", BRAsDcMotor.getPower());
    telemetry.addData("pos", eleAsDcMotor.getTargetPosition());
    telemetry.addData("tgtpos", level);
    telemetry.addData("pos", eleAsDcMotor.getCurrentPosition());
    telemetry.addData("bus", bus);
    telemetry.addData("eletg", eletg);
  }
}
