package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.IMU;

import java.util.Arrays;
import java.lang.Math;

import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;

@TeleOp(name = "Vibelop (Java)")
public class Veleop extends LinearOpMode {

  private DcMotor BLMotor;
  private DcMotor FLMotor;
  private DcMotor BRMotor;
  private DcMotor FRMotor;
  private IMU imu;
  
  // Mechanum Wheel Power Function
  public double[] whlPowerer(double stkAng,double robAng){
    
    //robAng = robAng + 180;
    if (robAng < 0){
      robAng = robAng + 360;
    }
    
    double relRobAng = stkAng - robAng;
      
    if (relRobAng < 0){ 
      relRobAng = relRobAng + 360;
    }
    
    
    double[] FL_BL = {0,0};
    
    FL_BL[0]= Math.sin((relRobAng + 45)*(3.14159265/180));
    FL_BL[1]= Math.sin((relRobAng + 135)*(3.14159265/180));
    
    return FL_BL;
  }
  
  public void turnPowerer(double xRight){
    if (xRight > 0){
        BLMotor.setPower(1);
        FRMotor.setPower(-1);
        FLMotor.setPower(1);
        BRMotor.setPower(-1);
    }
    else{
        BLMotor.setPower(-1);
        FRMotor.setPower(1);
        FLMotor.setPower(-1);
        BRMotor.setPower(1);
    }
  }


  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    float xDrive;
    float yDrive;
    float Pivot;
    float xTurn;
    
    //Define IMU Parameters
    imu = hardwareMap.get(IMU.class, "imu");
    
    RevHubOrientationOnRobot.LogoFacingDirection logoDir = RevHubOrientationOnRobot.LogoFacingDirection.UP;
    RevHubOrientationOnRobot.UsbFacingDirection usbDir = RevHubOrientationOnRobot.UsbFacingDirection.FORWARD;
      
    RevHubOrientationOnRobot orientateOnRob = new RevHubOrientationOnRobot(logoDir, usbDir);
    
    //initializign IMU
    imu.initialize(new IMU.Parameters(orientateOnRob));
    
    //Object recieving IMu angles
    YawPitchRollAngles robOrientate;
    robOrientate = imu.getRobotYawPitchRollAngles();
    
    //Defining motors
    BLMotor = hardwareMap.get(DcMotor.class, "BL Motor");
    FLMotor = hardwareMap.get(DcMotor.class, "FL Motor");
    BRMotor = hardwareMap.get(DcMotor.class, "BR Motor");
    FRMotor = hardwareMap.get(DcMotor.class, "FR Motor");

    // Put initialization blocks here.
    BLMotor.setDirection(DcMotorSimple.Direction.REVERSE);
    FLMotor.setDirection(DcMotorSimple.Direction.REVERSE);
    BLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    BRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    FLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    FRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    
    
    waitForStart();
    if (opModeIsActive()) {
      // Put run blocks here.
      while (opModeIsActive()) {
        // Put loop blocks here.
        BLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        FLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        FRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        
        xDrive = gamepad1.left_stick_x;
        yDrive = gamepad1.left_stick_y;
        
        xTurn = gamepad1.right_stick_x;
        
        YawPitchRollAngles orientation = imu.getRobotYawPitchRollAngles();
        AngularVelocity angularVelocity = imu.getRobotAngularVelocity(AngleUnit.DEGREES);
  
        //Getting Stick Angle
        double lStkAng = Math.atan(yDrive / xDrive) * 180/3.14159265;
        if (lStkAng < 0 && yDrive < 0){
          lStkAng = lStkAng * -1 + 270;
        }
        else if (lStkAng < 0 && yDrive > 0){
          lStkAng = lStkAng * -1 + 90;
        }
        else if (lStkAng > 0 && yDrive < 0){
          lStkAng = lStkAng * -1 + 90;
        }
        else if (lStkAng > 0 && yDrive > 0){
          lStkAng = lStkAng * -1 + 270;
        }
        else if ((lStkAng == 0)&&(xDrive < 0)){
          lStkAng = 90;
        }
        else if ((lStkAng == 0)&&(xDrive > 0)){
          lStkAng = 270;
        }
        
        double Yaw = orientation.getYaw(AngleUnit.DEGREES);
        
        double[] whlPower = whlPowerer(lStkAng, Yaw);
        
        if (xTurn == 0){
          BLMotor.setPower(whlPower[0]);
          FRMotor.setPower(whlPower[0]);
          FLMotor.setPower(whlPower[1]);
          BRMotor.setPower(whlPower[1]);
          telemetry.addData("FL and BR",whlPower[0]);
          telemetry.addData("BL and FR",whlPower[1]);
        }
        else {
          turnPowerer(xTurn);
          telemetry.addData("xTurn",xTurn);
        }
        
        telemetry.addData("Yaw",Yaw);
        telemetry.addData("StickAngle",lStkAng);
        telemetry.update();
      }
    }
  }
}
